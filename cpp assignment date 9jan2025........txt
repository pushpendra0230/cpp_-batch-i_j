cpp assignment date 9jan2025................
===========================================================================================================
q.1.Given an array of positive integers, calculate the factorial of each number and store the results in a new array. Ignore any negative numbers in the input.

#include<bits/stdc++.h>
using namespace std;
int factorial(int n)
{
    int fact=1;
    for(int i=1;i<=n;i++)
    {
        fact*=i;
    }
    return fact;
}
vector<int> getfactorial(vector<int>arr)
{
    vector<int>res;
    for(auto it:arr)
    {
        res.push_back(factorial(it));
    }
    return res;
}
int main()
{
    vector<int>arr={1,2,3,4,5,6,7,8};
    vector<int>res = getfactorial(arr);
    for(auto it:res)
    {
        cout<<it<<" ";
    }
}
===========================================================================================================================================
q.2.Write a program that takes an array of integers as input and filters out all the prime numbers. Store the prime numbers in a separate array.

#include<bits/stdc++.h>
using namespace std;
bool isprimenumber(int n)
{
    if(n<=1)
    {
        return false;
    }
    for(int i=2;i*i<=n;i++)
    {
        if(n%i==0)
         return false;
    }
    return true;
}
int main()
{
    vector<int>arr={1,2,3,4,5,6,7,8};
    vector<int>res;
    for(auto it:arr)
    {
        if(isprimenumber(it))
            res.push_back(it);
    }
    for(auto it:res)
    {
        cout<<it<<" ";
    }
}
===========================================================================================================================================
q.3.A number is self-dividing if it is divisible by each of its non-zero digits. For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0. Given an array of integers, identify and store all self-dividing numbers in a new array.


#include<bits/stdc++.h>
using namespace std;
bool isselfdividing(int n)
{
    int temp = n;
    int l;
    while(n)
    {
        l= n%10;
        if(l==0)
            return false;
        if(temp%l!=0)
            return false;
        n/=10;
    }
    return true;
   
}
int main()
{
    vector<int>arr={1,2,3,4,5,6,7,8,21,25,128,56,55,127};
    vector<int>res;
    for(auto it:arr)
    {
        if(isselfdividing(it))
            res.push_back(it);
    }
    for(auto it:res)
    {
        cout<<it<<" ";
    }
}
===========================================================================================================================================
q.4.Given an array of integers, compute the square of each number and store these values in a new array.

#include<bits/stdc++.h>
using namespace std;
vector<int> squareArray(vector<int> arr) 
{
    vector<int> res;
    for (auto it : arr) 
    {
        res.push_back(it * it);
    }
    return res;
}
int main() 
{
    vector<int>arr={1,2,3,4,5};
    vector<int> squared = squareArray(arr);
    for (auto it : squared) 
    {
        cout << it << " ";
    }
    cout << endl;
    return 0;
}
===========================================================================================================================================
q.5.Write a program that takes an array of integers and calculates the sum, average, and product of all its positive elements. Store these three values in a result array.

#include<bits/stdc++.h>
using namespace std;
vector<double> calculate(vector<int> arr) 
{
    long long sum=0,product=1;
    int count=0;
    for (auto it : arr) 
    {
        if(it>0) 
        {
            sum+=it;
            product*=it;
            count++;
        }
    }
    double avg=count>0?(double)sum/count:0.0;
    return {(double)sum, avg, (double)product};
}
int main() 
{
    vector<int> arr={1,2,3,-4,5,6,-7};
    vector<double>result=calculate(arr);
    for (auto it : result) 
    {
        cout<<it<<" ";
    }
    return 0;
}
===========================================================================================================================================
q.6.From a given array of integers, calculate the cube of each odd number and store the results in a new array.


#include<bits/stdc++.h>
using namespace std;
vector<int>cube(vector<int> arr) 
{
    vector<int>res;
    for(auto it : arr)
    {
        if(it%2!=0) 
        {
            res.push_back(it*it*it);
        }
    }
    return res;
}
int main() 
{
    vector<int>arr={1,2,3,4,5};
    vector<int>cubes=cube(arr);
    for(auto it:cubes) 
    {
        cout<<it<<" ";
    }
    return 0;
}
===========================================================================================================================================
q.7.For every element in the provided array, generate an array containing its factors (excluding 1 and the number itself if the number is composite). Store these factor arrays as elements of a larger array.


#include<bits/stdc++.h>
using namespace std;
vector<int> getFactors(int n) 
{
    vector<int> factors;
    for (int i = 2; i < n; i++) 
    {
        if (n % i == 0) 
        {
            factors.push_back(i);
        }
    }
    return factors;
}
vector<vector<int>>generateFactors(vector<int> arr) 
{
    vector<vector<int>> res;
    for (auto it : arr) 
    {
        res.push_back(getFactors(it));
    }
    return res;
}
int main() 
{
    vector<int> arr = {4, 6, 8, 10, 15};
    vector<vector<int>> factors = generateFactors(arr);
    for (auto vec : factors) 
    {
        for (auto it : vec)
        {
            cout << it << " ";
        }
        cout<<"\n";
    }
    return 0;
}
===========================================================================================================================================
q.8.Write a program that checks if each number in an array of integers is a palindrome. Store true for palindrome numbers and false otherwise in a new array.


#include<bits/stdc++.h>
using namespace std;
bool isPalindrome(int num) 
{
    int original=num;
    int reversed=0;
    while(num!=0) 
    {
        int digit=num%10;
        reversed=reversed*10+digit;
        num/=10;
    }
    return original == reversed;
}
int main() 
{
    int arr[] = {121, 123, 232, 455, 909};
    int n=sizeof(arr)/sizeof(arr[0]);
    int result[n];
    for(int i=0;i<n;i++) 
    {
        result[i]=isPalindrome(arr[i])?1:0;
    }
    for(int i=0;i<n;i++) 
    {
        cout<<result[i]<<" ";
    }
    return 0;
}
===========================================================================================================================================